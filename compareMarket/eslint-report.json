[{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/.eslintrc.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  root: true,\n  extends: '@react-native',\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/.prettierrc.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  arrowParens: 'avoid',\n  bracketSameLine: true,\n  bracketSpacing: false,\n  singleQuote: true,\n  trailingComma: 'all',\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":1,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'set' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SectionProps' is defined but never used.","line":25,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'imagesUploaded' is assigned a value but never used.","line":32,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":24}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport type {PropsWithChildren} from 'react';\nimport {\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  Button,\n  Text,\n  useColorScheme,\n  View,\n  TextInput,\n} from 'react-native';\n\nimport {\n  Colors,\n} from 'react-native/Libraries/NewAppScreen';\n\nimport ImagePickerComponent from './src/components/ImagePickerComponent';\nimport { NativeBaseProvider } from 'native-base';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { set } from 'mongoose';\n\ntype SectionProps = PropsWithChildren<{\n  title: string;\n}>;\n\n\nfunction App(): React.JSX.Element {\n  const isDarkMode = useColorScheme() === 'dark';\n  const [imagesUploaded, setImagesUploaded] = useState(false);\n  const [resultText, setResultText] = useState('');\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n  const [walmartResult, setWalmartResult] = useState<{name: string; price: string}[]>([]);\n  const [targetResult, setTargetResult] = useState<{name: string; price: string}[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,\n  };\n\n  const handleImageSelected = (isImageSelected: boolean, imageData: string) => {\n    console.log('Image Selected:', isImageSelected, imageData);\n    setImagesUploaded(isImageSelected);\n    setSelectedImage(imageData);\n  };\n\n  //send image to the server to be processed by the OCR\n  const handleUpload = async () => {\n    if (selectedImage) {\n      try {\n        const formData = new FormData();\n        formData.append('image', {\n          uri: selectedImage,\n          name: 'photo.jpg',\n          type: 'image/jpeg',\n        });\n\n        const response = await fetch('http://localhost:8080/api/sendImageToProcess', {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n\n        const result = await response.json();\n        setResultText(result.text);\n      } catch (error) {\n        console.error('Error sending image:', error);\n      }\n    }\n  };\n\n  //send the text to the server and get the current prices from Walmart\n  const handleCheckWalmart = async () => {\n    if (resultText) {\n      setLoading(true);\n      try {\n        const response = await fetch('http://localhost:8080/api/checkWalmart', {\n          method: 'POST',\n          body: JSON.stringify({text: resultText}),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const result = await response.json();\n        console.log('Walmart Result:', result);\n\n        setWalmartResult(result);\n      } catch (error) {\n        console.error('Error checking Walmart:', error);\n      }\n    }\n    setLoading(false);\n  }\n\n  //send the text to the server and get the current prices from Target\n  const handleCheckTarget = async () => {\n    if (resultText) {\n      setLoading(true);\n      try {\n        const response = await fetch('http://localhost:8080/api/checkTarget', {\n          method: 'POST',\n          body: JSON.stringify({text: resultText}),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n\n        const result = await response.json();\n        console.log('Target Result:', result);\n\n        setTargetResult(result);\n      } catch (error) {\n        console.error('Error checking Target:', error);\n      }\n    }\n    setLoading(false);\n  }\n    \n  //calculate the total price of the products\n  const calculateTotal = (products: {name: string; price: string}[]) => {\n    return products.reduce((total, product) => {\n      return total + parseFloat(product.price);\n    }, 0);\n  }\n\n  return (\n    <SafeAreaProvider>\n      <NativeBaseProvider>\n        <SafeAreaView style={backgroundStyle}>\n          <StatusBar\n            barStyle={isDarkMode ? 'light-content' : 'dark-content'}\n            backgroundColor={backgroundStyle.backgroundColor}\n          />\n          <ScrollView\n            contentInsetAdjustmentBehavior=\"automatic\"\n            style={backgroundStyle}>\n            <View\n              style={{\n                backgroundColor: isDarkMode ? Colors.black : Colors.white,\n              }}>\n              <ImagePickerComponent\n                onImageSelected={handleImageSelected}\n              />\n              <Button title=\"Upload Image\" onPress={handleUpload} disabled={!selectedImage} />\n\n              {resultText ? <TextInput\n              style={styles.textInput}\n              value={resultText}\n              onChangeText={setResultText}\n              multiline={true}\n              scrollEnabled={true}\n              textAlignVertical='top'\n              /> : null}\n\n              <Button title=\"Check Walmart\" onPress={handleCheckWalmart} disabled={!resultText} />\n              {walmartResult.length>0 &&(\n                <View>\n                  {walmartResult.map((product, index) => (\n                    <TextInput\n                      key={index}\n                      style={styles.textInput}\n                      value={`Name: ${product.name}\\nPrice: $${product.price}`}\n                      multiline={true}\n                      scrollEnabled={true}\n                      textAlignVertical='top'\n                      editable={false}\n                    />\n                  ))}\n                  <Text style={{alignSelf: 'center'}}>Total: ${calculateTotal(walmartResult).toFixed(2)}</Text>  \n                </View>\n              )}\n              <Button title=\"Check Target\" onPress={\n                handleCheckTarget\n                } disabled={!resultText} />\n                {!targetResult.length && resultText && (\n                loading && <Text style={{alignSelf: 'center'}}>Loading...</Text>\n                )}\n              {targetResult.length>0 &&(\n                <View>\n                  {targetResult.map((product, index) => (\n                    <TextInput\n                      key={index}\n                      style={styles.textInput}\n                      value={`Name: ${product.name}\\nPrice: $${product.price}`}\n                      multiline={true}\n                      scrollEnabled={true}\n                      textAlignVertical='top'\n                      editable={false}\n                    />\n                  ))}\n                  <Text style={{alignSelf: 'center'}}>Total: ${calculateTotal(targetResult)}</Text>  \n                </View>\n              )}\n            </View>\n          </ScrollView>\n        </SafeAreaView>\n      </NativeBaseProvider>\n    </SafeAreaProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#f9f9f9',\n  },\n  textInput: {\n    alignSelf: 'center',\n    width: '80%',\n    borderColor: 'gray',\n    borderWidth: 1,\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    fontSize: 16,\n    backgroundColor: '#fff',\n  },\n});\n\n\nexport default App;\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/__tests__/App.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/babel.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  presets: ['module:@react-native/babel-preset'],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/jest.config.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"module.exports = {\n  preset: 'react-native',\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/metro.config.js","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":1,"column":41,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":1,"endColumn":78},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":41,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":48},{"ruleId":"no-undef","severity":2,"message":"'module' is not defined.","line":11,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":7},{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":11,"column":47,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":56}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');\n\n/**\n * Metro configuration\n * https://reactnative.dev/docs/metro\n *\n * @type {import('metro-config').MetroConfig}\n */\nconst config = {};\n\nmodule.exports = mergeConfig(getDefaultConfig(__dirname), config);\n","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/src/components/ImagePickerComponent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Text' is defined but never used.","line":5,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":20}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Image } from 'native-base';\nimport useImagePicker from '../hooks/useImagePicker';\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { View, Text, Button } from 'react-native';\n\ninterface ImageUploadComponentProps {\n    onImageSelected: (isImageSelected: boolean, imageData: string) => void;\n}    \n\nconst ImagePickerComponent: React.FC<ImageUploadComponentProps> = ({onImageSelected}) => {\n   const {images, openImagePicker} = useImagePicker();\n\n    useEffect(() => {\n        if(images.length>0){\n            onImageSelected(true, images[0].uri ?? '');\n        } else {\n            onImageSelected(false, '');\n        }\n    }, [images, onImageSelected]);\n\n    return (\n        <View>\n            {/* <Text>Image Picker Component</Text> */}\n            <Button title=\"Select Image\" onPress={ openImagePicker} />\n            {images.length>0 && (\n                <>\n                <Image source={{uri: images[0].uri}} alt=\"Selected Image\" \n                style= {{width: 200, height: 200, alignSelf: \"center\"}}/>\n                </>\n            )}\n        </View>\n    );\n};\n\nexport default ImagePickerComponent;","usedDeprecatedRules":[]},{"filePath":"/Users/michaelblum/Documents/compareMarketCrisis/compareMarket/compareMarket/src/hooks/useImagePicker.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'launchCamera' is defined but never used.","line":2,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'set' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":13}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Alert } from 'react-native';\nimport {Asset, ImagePickerResponse, launchCamera, launchImageLibrary} from 'react-native-image-picker';\nimport {useState} from 'react';\nimport { set } from 'mongoose';\n\nconst useImagePicker = () => {\n\n    const options = {\n        mediaType: 'photo' as const,\n        selectionLimit: 1,\n    };\n\n    const [images, setImages] = useState<Asset[]>([]);\n    const [error, setError] = useState<string | null>(null);\n\n    const openImagePicker = () => {\n        launchImageLibrary(options, (response: ImagePickerResponse) => {\n            if(response.didCancel){\n                console.log('User cancelled image picker');\n            } else if(response.errorCode){\n                console.error(response.errorMessage);\n                setError(response.errorMessage || 'An error occurred');\n                Alert.alert('Error', response.errorMessage);\n            }\n            else if(response.assets && response.assets.length>0){\n                const selectedImage = response.assets[0];\n                setImages([selectedImage]);\n            }\n        });\n    };\n\n    return {images,error, openImagePicker};\n};\n\n\nexport default useImagePicker;","usedDeprecatedRules":[]}]